<?xml version="1.0"?>
<doc>
<assembly>
<name>
cnsrapi
</name>
</assembly>
<members>
<member name="M:captainalm.calmcon.api.OutputText.#ctor(System.String,System.Drawing.Color,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
	<summary>
 Creates a new output text instance
 </summary>
	<param name="txt">The intal text.</param>
	<param name="forecol">The intal forecolor.</param>
	<param name="bld">Is the intal text bold.</param>
	<param name="itl">Is the intal text italic.</param>
	<param name="ul">Is the intal text underlined.</param>
	<param name="so">Is the intal text strikeout.</param>
	<remarks></remarks>
</member><member name="M:captainalm.calmcon.api.OutputText.write(System.String)">
	<summary>
 Writes text to the current block with the current block's attributes.
 </summary>
	<param name="txt">The text to write.</param>
	<exception cref="T:System.InvalidOperationException">Thrown when no blocks to write to.</exception>
	<remarks></remarks>
</member><member name="M:captainalm.calmcon.api.OutputText.writeline(System.String)">
	<summary>
 Writes text and a new line to the current block with the current block's attributes.
 </summary>
	<param name="txt">The text to write.</param>
	<exception cref="T:System.InvalidOperationException">Thrown when no blocks to write to.</exception>
	<remarks></remarks>
</member><member name="M:captainalm.calmcon.api.OutputText.write(System.String,System.Drawing.Color,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
	<summary>
 Writes text to a new or the current block depending on the current block's attributes or if there are any blocks at all.
 </summary>
	<param name="txt">The text.</param>
	<param name="forecol">The forecolor.</param>
	<param name="bld">Is the text bold.</param>
	<param name="itl">Is the text italic.</param>
	<param name="ul">Is the text underlined.</param>
	<param name="so">Is the text strikeout.</param>
	<remarks></remarks>
</member><member name="M:captainalm.calmcon.api.OutputText.writeline(System.String,System.Drawing.Color,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
	<summary>
 Writes text and a new line to a new or the current block depending on the current block's attributes or if there are any blocks at all.
 </summary>
	<param name="txt">The text.</param>
	<param name="forecol">The forecolor.</param>
	<param name="bld">Is the text bold.</param>
	<param name="itl">Is the text italic.</param>
	<param name="ul">Is the text underlined.</param>
	<param name="so">Is the text strikeout.</param>
	<remarks></remarks>
</member><member name="M:captainalm.calmcon.api.OutputText.ToOutputTextBlocks">
	<summary>
 Converts the contents of the OutputText to an array of OutputTextBlock Structures.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:captainalm.calmcon.api.OutputText.BlockCount">
	<summary>
 Returns the number of blocks in the OutputText object.
 </summary>
	<value>Integer.</value>
	<returns>The number of blocks in the OutputText object.</returns>
	<remarks></remarks>
</member><member name="P:captainalm.calmcon.api.OutputText.Block(System.Int32)">
	<summary>
 The default property, gets a block from an index.
 </summary>
	<param name="index">The index number.</param>
	<value>OutputTextBlock</value>
	<returns>The OutputTextBlock as that index.</returns>
	<remarks></remarks>
</member><member name="M:captainalm.calmcon.api.OutputText.op_Implicit(System.String)~captainalm.calmcon.api.OutputText">
	<summary>
 Converts a string to outputtext.
 </summary>
	<param name="str">The string to convert.</param>
	<returns>The output text instance.</returns>
	<remarks></remarks>
</member><member name="M:captainalm.calmcon.api.OutputText.op_Implicit(captainalm.calmcon.api.OutputTextBlock[])~captainalm.calmcon.api.OutputText">
	<summary>
 Converts an array of outputtextblock to outputtext.
 </summary>
	<param name="otba">The outputtextblock array to convert.</param>
	<returns>The output text instance.</returns>
	<remarks></remarks>
</member><member name="M:captainalm.calmcon.api.OutputText.op_Explicit(captainalm.calmcon.api.OutputText)~System.String">
	<summary>
 Converts an outputtext instance to an string.
 </summary>
	<param name="optxt">The outputtext instance to convert.</param>
	<returns>The string held by the outputtext instance.</returns>
	<remarks></remarks>
</member><member name="M:captainalm.calmcon.api.OutputText.op_Explicit(captainalm.calmcon.api.OutputText)~captainalm.calmcon.api.OutputTextBlock[]">
	<summary>
 Converts an outputtext instance to an output text block array.
 </summary>
	<param name="optxt">The outputtext instance to convert.</param>
	<returns>A outputtextblock array from the outputtext instance.</returns>
	<remarks></remarks>
</member><member name="M:captainalm.calmcon.api.OutputText.op_Concatenate(captainalm.calmcon.api.OutputText,captainalm.calmcon.api.OutputText)">
	<summary>
 Concats two Output Texts Together.
 </summary>
	<param name="optxt1">The first output text.</param>
	<param name="optxt2">The second output text.</param>
	<returns>The concated output text object.</returns>
	<remarks></remarks>
</member><member name="M:captainalm.calmcon.api.OutputText.op_Inequality(captainalm.calmcon.api.OutputText,captainalm.calmcon.api.OutputText)">
	<summary>
 Checks if two output text strings are not equal.
 </summary>
	<param name="optxt1">The first output text.</param>
	<param name="optxt2">The second output text.</param>
	<returns>The boolean of if they are not equal.</returns>
	<remarks></remarks>
</member><member name="M:captainalm.calmcon.api.OutputText.op_Equality(captainalm.calmcon.api.OutputText,captainalm.calmcon.api.OutputText)">
	<summary>
 Checks if two output text strings are equal.
 </summary>
	<param name="optxt1">The first output text.</param>
	<param name="optxt2">The second output text.</param>
	<returns>The boolean of if they are equal.</returns>
	<remarks></remarks>
</member><member name="M:captainalm.calmcon.api.OutputText.ToString">
	<summary>
 Returns the Value of this Object as a String.
 </summary>
	<returns>String that this object contains.</returns>
	<remarks></remarks>
</member><member name="T:captainalm.calmcon.api.OutputText">
	<summary>
 This class is used to output text to the rich textbox output.
 </summary>
	<remarks></remarks>
</member><member name="F:captainalm.calmcon.api.OutputTextBlock.text">
	<summary>
 The held text.
 </summary>
	<remarks></remarks>
</member><member name="F:captainalm.calmcon.api.OutputTextBlock.forecolor">
	<summary>
 The foreground colour of the text.
 </summary>
	<remarks></remarks>
</member><member name="F:captainalm.calmcon.api.OutputTextBlock.bold">
	<summary>
 If the text is bold.
 </summary>
	<remarks></remarks>
</member><member name="F:captainalm.calmcon.api.OutputTextBlock.italic">
	<summary>
 If the text is italic.
 </summary>
	<remarks></remarks>
</member><member name="F:captainalm.calmcon.api.OutputTextBlock.underline">
	<summary>
 If the text is underlined.
 </summary>
	<remarks></remarks>
</member><member name="F:captainalm.calmcon.api.OutputTextBlock.strikeout">
	<summary>
 If the text is striked out.
 </summary>
	<remarks></remarks>
</member><member name="M:captainalm.calmcon.api.OutputTextBlock.ToString">
	<summary>
 Returns the String held by this object.
 </summary>
	<returns>The String held by this object.</returns>
	<remarks></remarks>
</member><member name="T:captainalm.calmcon.api.OutputTextBlock">
	<summary>
 This is the split up parts of an OutputText Instance.
 </summary>
	<remarks></remarks>
</member><member name="M:captainalm.calmcon.api.SetupMethodAttribute.#ctor">
	<summary>
 Initalizes a new instance of this Attribute on The Method.
 </summary>
	<remarks></remarks>
</member><member name="T:captainalm.calmcon.api.SetupMethodAttribute">
	<summary>
 This Attribute is used to Specify The Setup Method of The Library.
 </summary>
	<remarks></remarks>
</member><member name="P:captainalm.calmcon.api.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:captainalm.calmcon.api.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="T:captainalm.calmcon.api.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="F:captainalm.calmcon.api.Switches.MultilineCheckboxEnablement">
	<summary>
 Enable, Disable or Program Control the Multiline Entry Checkbox.
 </summary>
	<remarks></remarks>
</member><member name="F:captainalm.calmcon.api.Switches.OutputBoxReadKey">
	<summary>
 Read keys from the output boxes.
 </summary>
	<remarks></remarks>
</member><member name="F:captainalm.calmcon.api.Switches.CommandExecution">
	<summary>
 Enable Or Disable Command Execution.
 </summary>
	<remarks></remarks>
</member><member name="F:captainalm.calmcon.api.Switches.AllowMultiCommandEntry">
	<summary>
 Allow multipule Lines to be Entered into the command box.
 </summary>
	<remarks></remarks>
</member><member name="T:captainalm.calmcon.api.Switches">
	<summary>
 This provides API switching for the program.
 </summary>
	<remarks></remarks>
</member><member name="F:captainalm.calmcon.api.Manipulator.CommandStack">
	<summary>
 This provides the command stack for access and modification.
 </summary>
	<remarks></remarks>
</member><member name="F:captainalm.calmcon.api.Manipulator.VariableDictionary">
	<summary>
 This provides the variable dictionary for access and modification.
 </summary>
	<remarks></remarks>
</member><member name="F:captainalm.calmcon.api.Manipulator.SyntaxMode">
	<summary>
 Provides the syntax mode for access and manipulation, be careful!
 </summary>
	<remarks></remarks>
</member><member name="T:captainalm.calmcon.api.Manipulator">
	<summary>
 This provides API manipulation for the program.
 </summary>
	<remarks></remarks>
</member><member name="T:captainalm.calmcon.api.Types.Cmd">
	<summary>
 Any commands set in libraries need to use this as the delegate type.
 </summary>
	<param name="arr">The array of parameters for the command.</param>
	<returns>Return value of the command.</returns>
	<remarks></remarks>
</member><member name="T:captainalm.calmcon.api.Types.ProgramEventHook">
	<summary>
 This is the hook delegate used for the start and stop program hook events.
 </summary>
	<remarks></remarks>
</member><member name="T:captainalm.calmcon.api.Types.PreCommandExecuteHook">
	<summary>
 This is the hook used for the preexecute command hook event.
 </summary>
	<param name="commandstr">The command string being executed.</param>
	<remarks></remarks>
</member><member name="T:captainalm.calmcon.api.Types.PostCommandExecuteHook">
	<summary>
 This is the hook used for the postexecute command hook event.
 </summary>
	<param name="commandstr">The command string being executed.</param>
	<param name="returnval">The return output text from the command.</param>
	<remarks></remarks>
</member><member name="T:captainalm.calmcon.api.Types.FormHook">
	<summary>
 This hook is used to access and modify the main form.
 </summary>
	<param name="form">The passed main form.</param>
	<remarks></remarks>
</member><member name="T:captainalm.calmcon.api.Types.OutputTextBoxHook">
	<summary>
 This hook is used to access the output box on the main form.
 </summary>
	<param name="txtbx">The output textbox on the form.</param>
	<remarks></remarks>
</member><member name="T:captainalm.calmcon.api.Types.CommandTextBoxHook">
	<summary>
 This hook is used to access the command box on the main form.
 </summary>
	<param name="txtbx">The command textbox on the form.</param>
	<remarks></remarks>
</member><member name="T:captainalm.calmcon.api.Types.RunCommandHook">
	<summary>
 This hook is used to run a command,
 and can be invoked by the library once an instance is retrieved via the GetRunCommandHook.
 </summary>
	<param name="command">The command to pass.</param>
	<param name="args">The arguments to pass.</param>
	<returns>The return value of the command.</returns>
	<remarks></remarks>
</member><member name="T:captainalm.calmcon.api.Types.GetRunCommandHook">
	<summary>
 Gets the hook instance for RunCommandHook so it can be invoked by the library.
 </summary>
	<param name="hook">The hook instance.</param>
	<remarks></remarks>
</member><member name="T:captainalm.calmcon.api.Types.WriteOutputHook">
	<summary>
 This hook is used to write to the output textbox,
 and can be invoked by the library once an instance is retrieved via the GetWriteOutputHook.
 </summary>
	<param name="text">The Output Text to write to the output textbox.</param>
	<remarks></remarks>
</member><member name="T:captainalm.calmcon.api.Types.GetWriteOutputHook">
	<summary>
 Gets the hook instance for WriteOutputHook so it can be invoked by the library.
 </summary>
	<param name="hook">The hook instance.</param>
	<remarks></remarks>
</member><member name="T:captainalm.calmcon.api.Types.ReadOutputHook">
	<summary>
 This hook is used to read from the output textbox,
 and can be invoked by the library once an instance is retrieved via the GetReadOutputHook.
 </summary>
	<returns>The contents of the output textbox.</returns>
	<remarks></remarks>
</member><member name="T:captainalm.calmcon.api.Types.GetReadOutputHook">
	<summary>
 Gets the hook instance for ReadOutputHook so it can be invoked by the library.
 </summary>
	<param name="hook">The hook instance.</param>
	<remarks></remarks>
</member><member name="T:captainalm.calmcon.api.Types.ReadKeyHook">
	<summary>
 This hook is used to listen for a key being pressed in the Operation Log Text Box event.
 </summary>
	<param name="key">The key data caught.</param>
	<remarks></remarks>
</member><member name="T:captainalm.calmcon.api.Types.AddExternalCommandHook">
	<summary>
 This hook is used to add commands during program execution.
 and can be invoked by the library once an instance is retrieved via the GetAddExternalCommandHook.
 </summary>
	<param name="libname">The library name.</param>
	<param name="command">The command to add.</param>
	<returns>The id of the added command or 0 for faliure.</returns>
	<remarks></remarks>
</member><member name="T:captainalm.calmcon.api.Types.GetAddExternalCommandHook">
	<summary>
 Gets the hook instance for AddExternalCommandHook so it can be invoked by the library.
 </summary>
	<param name="hook">The hook instance.</param>
	<remarks></remarks>
</member><member name="T:captainalm.calmcon.api.Types.RemoveExternalCommandHook">
	<summary>
 This hook is used to remove added commands during program execution.
 and can be invoked by the library once an instance is retrieved via the GetRemoveExternalCommandHook.
 </summary>
	<param name="libname">The library name.</param>
	<param name="id">The ID of the command to remove.</param>
	<returns>If the removal succeded.</returns>
	<remarks></remarks>
</member><member name="T:captainalm.calmcon.api.Types.GetRemoveExternalCommandHook">
	<summary>
 Gets the hook instance for RemoveExternalCommandHook so it can be invoked by the library.
 </summary>
	<param name="hook">The hook instance.</param>
	<remarks></remarks>
</member><member name="T:captainalm.calmcon.api.Types.ListExternalCommandsHook">
	<summary>
 This hook is used to list added commands during program execution.
 and can be invoked by the library once an instance is retrieved via the GetListExternalCommandsHook.
 </summary>
	<param name="libname">The library name.</param>
	<returns>This list of the commands added by this library name in the form "id : name"</returns>
	<remarks></remarks>
</member><member name="T:captainalm.calmcon.api.Types.GetListExternalCommandsHook">
	<summary>
 Gets the hook instance for ListExternalCommandsHook so it can be invoked by the library.
 </summary>
	<param name="hook">The hook instance.</param>
	<remarks></remarks>
</member><member name="T:captainalm.calmcon.api.Types.AddExternalSyntaxHook">
	<summary>
 This hook is used to add syntaxes during program execution.
 and can be invoked by the library once an instance is retrieved via the GetAddExternalSyntaxHook.
 </summary>
	<param name="libname">The library name.</param>
	<param name="syntax">The syntax to add.</param>
	<returns>The id of the added syntax or 0 for faliure.</returns>
	<remarks></remarks>
</member><member name="T:captainalm.calmcon.api.Types.GetAddExternalSyntaxHook">
	<summary>
 Gets the hook instance for AddExternalSyntaxHook so it can be invoked by the library.
 </summary>
	<param name="hook">The hook instance.</param>
	<remarks></remarks>
</member><member name="T:captainalm.calmcon.api.Types.RemoveExternalSyntaxHook">
	<summary>
 This hook is used to remove added syntaxes during program execution.
 and can be invoked by the library once an instance is retrieved via the GetRemoveExternalSyntaxHook.
 </summary>
	<param name="libname">The library name.</param>
	<param name="id">The ID of the syntax to remove.</param>
	<returns>If the removal succeded.</returns>
	<remarks></remarks>
</member><member name="T:captainalm.calmcon.api.Types.GetRemoveExternalSyntaxHook">
	<summary>
 Gets the hook instance for RemoveExternalSyntaxHook so it can be invoked by the library.
 </summary>
	<param name="hook">The hook instance.</param>
	<remarks></remarks>
</member><member name="T:captainalm.calmcon.api.Types.ListExternalSyntaxesHook">
	<summary>
 This hook is used to list added syntaxes during program execution.
 and can be invoked by the library once an instance is retrieved via the GetListExternalSyntaxesHook.
 </summary>
	<param name="libname">The library name.</param>
	<returns>This list of the syntaxes added by this library name in the form "id : name"</returns>
	<remarks></remarks>
</member><member name="T:captainalm.calmcon.api.Types.GetListExternalSyntaxesHook">
	<summary>
 Gets the hook instance for ListExternalSyntaxesHook so it can be invoked by the library.
 </summary>
	<param name="hook">The hook instance.</param>
	<remarks></remarks>
</member><member name="M:captainalm.calmcon.api.ISyntax.name">
	<summary>
 Returns the Syntax Name.
 </summary>
	<returns>Returns the Syntax Name.</returns>
	<remarks></remarks>
</member><member name="M:captainalm.calmcon.api.ISyntax.decrypt(System.String,System.Collections.Generic.List{System.String})">
	<summary>
 Defines the required command decryptor, the returned list has the command as the first item and the arguments as the other items.
 </summary>
	<param name="strcmd">This is where the command string is passed.</param>
	<param name="commands">This is where the list of commands on the console is passed.</param>
	<returns>The returned list has the command as the first item and the arguments as the other items.</returns>
	<remarks></remarks>
</member><member name="T:captainalm.calmcon.api.ISyntax">
	<summary>
 API interface for adding other syntax language interpreters.
 </summary>
	<remarks></remarks>
</member><member name="F:captainalm.calmcon.api.HookInfo.name">
	<summary>
 The hook set name.
 </summary>
	<remarks></remarks>
</member><member name="F:captainalm.calmcon.api.HookInfo.hook_programstart">
	<summary>
 The hook program start delegate.
 </summary>
	<remarks></remarks>
</member><member name="F:captainalm.calmcon.api.HookInfo.hook_programstop">
	<summary>
 The hook program stop delegate.
 </summary>
	<remarks></remarks>
</member><member name="F:captainalm.calmcon.api.HookInfo.hook_command_preexecute">
	<summary>
 The hook command pre-execute delegate.
 </summary>
	<remarks></remarks>
</member><member name="F:captainalm.calmcon.api.HookInfo.hook_command_postexecute">
	<summary>
 The hook command post-execute delegate.
 </summary>
	<remarks></remarks>
</member><member name="F:captainalm.calmcon.api.HookInfo.hook_form">
	<summary>
 The hook form delegate.
 </summary>
	<remarks></remarks>
</member><member name="F:captainalm.calmcon.api.HookInfo.hook_out_txtbx">
	<summary>
 The hook out textbox delegate.
 </summary>
	<remarks></remarks>
</member><member name="F:captainalm.calmcon.api.HookInfo.hook_runcommand">
	<summary>
 The hook get runcommand delegate.
 </summary>
	<remarks></remarks>
</member><member name="F:captainalm.calmcon.api.HookInfo.hook_writeoutput">
	<summary>
 The hook get writeoutput delegate.
 </summary>
	<remarks></remarks>
</member><member name="F:captainalm.calmcon.api.HookInfo.hook_readoutput">
	<summary>
 The hook get readoutput delegate.
 </summary>
	<remarks></remarks>
</member><member name="F:captainalm.calmcon.api.HookInfo.hook_rk">
	<summary>
 The hook read key delegate.
 </summary>
	<remarks></remarks>
</member><member name="F:captainalm.calmcon.api.HookInfo.hook_cmd_txtbx">
	<summary>
 The hook out textbox delegate.
 </summary>
	<remarks></remarks>
</member><member name="F:captainalm.calmcon.api.HookInfo.hook_e_cmd_add">
	<summary>
 The hook get add external command delegate.
 </summary>
	<remarks></remarks>
</member><member name="F:captainalm.calmcon.api.HookInfo.hook_e_cmd_list">
	<summary>
 The hook get list external commands delegate.
 </summary>
	<remarks></remarks>
</member><member name="F:captainalm.calmcon.api.HookInfo.hook_e_cmd_remove">
	<summary>
 The hook get remove external command delegate.
 </summary>
	<remarks></remarks>
</member><member name="F:captainalm.calmcon.api.HookInfo.hook_e_snx_add">
	<summary>
 The hook get add external syntax delegate.
 </summary>
	<remarks></remarks>
</member><member name="F:captainalm.calmcon.api.HookInfo.hook_e_snx_list">
	<summary>
 The hook get list external syntaxes delegate.
 </summary>
	<remarks></remarks>
</member><member name="F:captainalm.calmcon.api.HookInfo.hook_e_snx_remove">
	<summary>
 The hook get remove external syntax delegate.
 </summary>
	<remarks></remarks>
</member><member name="M:captainalm.calmcon.api.HookInfo.#ctor(System.String,captainalm.calmcon.api.Types.ProgramEventHook,captainalm.calmcon.api.Types.ProgramEventHook,captainalm.calmcon.api.Types.PreCommandExecuteHook,captainalm.calmcon.api.Types.PostCommandExecuteHook,captainalm.calmcon.api.Types.FormHook,captainalm.calmcon.api.Types.OutputTextBoxHook,captainalm.calmcon.api.Types.GetRunCommandHook,captainalm.calmcon.api.Types.GetWriteOutputHook,captainalm.calmcon.api.Types.GetReadOutputHook,captainalm.calmcon.api.Types.ReadKeyHook,captainalm.calmcon.api.Types.CommandTextBoxHook,captainalm.calmcon.api.Types.GetAddExternalCommandHook,captainalm.calmcon.api.Types.GetListExternalCommandsHook,captainalm.calmcon.api.Types.GetRemoveExternalCommandHook,captainalm.calmcon.api.Types.GetAddExternalSyntaxHook,captainalm.calmcon.api.Types.GetListExternalSyntaxesHook,captainalm.calmcon.api.Types.GetRemoveExternalSyntaxHook)">
	<summary>
 Constructs a new set of hook info, use nothing as a parameter if you do not want to register a certain hook.
 </summary>
	<param name="hook_set_name">The name of the hook set.</param>
	<param name="hcompreex">The Pre-Command Execute hook delegate.</param>
	<param name="hcompstex">The Post-Command Execute hook delegate.</param>
	<param name="hprostr">The Program Start hook delegate.</param>
	<param name="hprostp">The Program stop hook delegate.</param>
	<param name="hform">The form hook delegate.</param>
	<param name="houtbx">The output textbox hook delegate.</param>
	<param name="getrcom">The Get RunCommand Hook delegate.</param>
	<param name="getwout">The Get WriteOutput Hook delegate.</param>
	<param name="getrout">The Get ReadOutput Hook delegate.</param>
	<param name="rk">The Read Key (In the operation log text box.) Hook Delegate.</param>
	<param name="hcmdbx">The command textbox hook delegate.</param>
	<param name="hecmdadd">The Get Add External Command During Runtime hook Delegate.</param>
	<param name="hecmdlist">The Get List External Commands During Runtime hook Delegate.</param>
	<param name="hecmdremove">The Get Remove External Command During Runtime hook Delegate.</param>
	<param name="hesnxadd">The Get Add External Syntax During Runtime hook Delegate.</param>
	<param name="hesnxlist">The Get List External Syntaxes During Runtime hook Delegate.</param>
	<param name="hesnxremove">The Get Remove External Syntax During Runtime hook Delegate.</param>
	<remarks></remarks>
</member><member name="T:captainalm.calmcon.api.HookInfo">
	<summary>
 Use this structure to register hooks against a delegate, use nothing to specify no hook.
 </summary>
	<remarks></remarks>
</member><member name="F:captainalm.calmcon.api.LibrarySetup.name">
	<summary>
 Returns the name of the library.
 </summary>
	<remarks></remarks>
</member><member name="F:captainalm.calmcon.api.LibrarySetup.version">
	<summary>
 Returns the version number of the library.
 </summary>
	<remarks></remarks>
</member><member name="F:captainalm.calmcon.api.LibrarySetup.hook_info">
	<summary>
 Returns the hook set information of the library.
 </summary>
	<remarks></remarks>
</member><member name="F:captainalm.calmcon.api.LibrarySetup.commands">
	<summary>
 Returns the commands of the library.
 </summary>
	<remarks></remarks>
</member><member name="F:captainalm.calmcon.api.LibrarySetup.syntaxes">
	<summary>
 Retruns the syntaxes of the library.
 </summary>
	<remarks></remarks>
</member><member name="M:captainalm.calmcon.api.LibrarySetup.#ctor(System.String,System.Int32,captainalm.calmcon.api.HookInfo,captainalm.calmcon.api.Command[],captainalm.calmcon.api.ISyntax[])">
	<summary>
 Constructs a new LibrarySetup Structure.
 </summary>
	<param name="_name">The library name.</param>
	<param name="ver">The library Version.</param>
	<param name="_hookinfo">The library Hook Information.</param>
	<param name="_commands">The library Commands Array.</param>
	<param name="_syntaxes">The library Syntax Array.</param>
	<remarks></remarks>
</member><member name="T:captainalm.calmcon.api.LibrarySetup">
	<summary>
 Pass this structure from a function with a <see cref="T:captainalm.calmcon.api.SetupMethodAttribute">SetupMethodAttribute</see>, you need one of these functions per library definition.
 </summary>
	<remarks></remarks>
</member><member name="F:captainalm.calmcon.api.Command.command">
	<summary>
 The held command delegate.
 </summary>
	<remarks></remarks>
</member><member name="F:captainalm.calmcon.api.Command.name">
	<summary>
 The name of the command.
 </summary>
	<remarks></remarks>
</member><member name="F:captainalm.calmcon.api.Command.help">
	<summary>
 The help string for the command.
 </summary>
	<remarks></remarks>
</member><member name="M:captainalm.calmcon.api.Command.#ctor(System.String,captainalm.calmcon.api.Types.Cmd,System.String)">
	<summary>
 Constructs a new command.
 </summary>
	<param name="_name">The name of the command.</param>
	<param name="del">The delegate for the command using <seealso cref="T:captainalm.calmcon.api.Types.Cmd">the Cmd delegate type</seealso>.</param>
	<param name="_help">The help string for the command.</param>
	<remarks></remarks>
</member><member name="T:captainalm.calmcon.api.Command">
	<summary>
 Use this structure to register commands from a library.
 </summary>
	<remarks></remarks>
</member>
</members>
</doc>